// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  preferences   UserPreferences?
  entries       JournalEntry[]
  categories    Category[]

  @@map("users")
}

model UserPreferences {
  id                 String    @id @default(uuid())
  userId            String    @unique
  theme             String    @default("system")
  fontSize          Int       @default(16)
  emailNotifications Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Category {
  id          String    @id @default(uuid())
  userId      String
  name        String
  color       String
  description String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  entries     JournalEntry[] @relation("EntryCategories")

  @@unique([userId, name])
  @@map("categories")
}

model JournalEntry {
  id          String    @id @default(uuid())
  userId      String
  title       String
  content     String
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[] @relation("EntryCategories")
  metadata    EntryMetadata?

  // Indexes for better performance
  @@index([userId, createdAt(sort: Desc)]) // For listing entries by user
  @@index([title]) // For title search
  @@index([content]) // For content search
  @@index([userId, isPublic]) // For filtering public/private entries

  @@map("journal_entries")
}

model EntryMetadata {
  id             String    @id @default(uuid())
  entryId        String    @unique
  wordCount      Int?
  readingTime    Int?
  sentimentScore Float?
  location       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  entry          JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  // Indexes for better performance
  @@index([wordCount]) // For sorting by word count
  @@index([readingTime]) // For sorting by reading time
  @@index([createdAt]) // For time-based queries

  @@map("entry_metadata")
}
