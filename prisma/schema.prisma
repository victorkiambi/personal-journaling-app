generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  categories     Category[]
  journalEntries JournalEntry[]
  profile        Profile?
  sessions       Session[]
  settings       Settings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String   @default("light")
  emailNotifications Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id             String         @id @default(cuid())
  name           String
  color          String
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntries JournalEntry[] @relation("CategoryToJournalEntry")
}

model JournalEntry {
  id         String         @id @default(cuid())
  title      String
  content    String
  userId     String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  metadata   EntryMetadata?
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]     @relation("CategoryToJournalEntry")
}

model EntryMetadata {
  id                 String       @id @default(cuid())
  entryId            String       @unique
  wordCount          Int          @default(0)
  readingTime        Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  mood               String?
  sentimentMagnitude Float?
  sentimentScore     Float?
  entry              JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([entryId])
}
