// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  categories    Category[]
  entries       JournalEntry[]
  profile       Profile?
  settings      Settings?
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  birthdate   DateTime?
  location    String?
  occupation  String?
  interests   String[]
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id                String   @id @default(cuid())
  theme             String   @default("light")
  emailNotifications Boolean  @default(true)
  reminderTime      DateTime?
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Category {
  id          String         @id @default(cuid())
  name        String
  color       String
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries     JournalEntry[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([name, userId])
}

model JournalEntry {
  id          String         @id @default(cuid())
  title       String
  content     String        @db.Text
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[]
  metadata    EntryMetadata?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId, createdAt])
  @@index([userId, title])
}

model EntryMetadata {
  id           String       @id @default(cuid())
  wordCount    Int
  readingTime  Int         // in minutes
  sentiment    Float?      // -1 to 1 scale
  entryId      String      @unique
  entry        JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
